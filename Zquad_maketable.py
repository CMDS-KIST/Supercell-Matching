import math, cmath, bisect
import operator
from gaussint import GaussInt
import numpy as np
import os

def make_quadratic_supercell_dict(max_index, d):
    omega = cmath.sqrt(-2)
    #omega = cmath.sqrt(-1)
    
    ratio_dict = {}
    d_mod4 = divmod(d, 4)[1]
    # Actually, Z[sqrt[D]] is generated by {1, (-1 + sqrt[D])/2} if D mod 4 == 3, but it cannot make integer transformation matrices.
    if (d_mod4 == 1 or d_mod4 == 2) or True:
        omega = cmath.sqrt(d)
    elif d_mod4 == 3:
        omega = (-1 + cmath.sqrt(d))/2
    
    normsquare_func = lambda x, y: ((x + omega*y)*(x + omega.conjugate()*y)).real
    
    for i in range(0, max_index):
        for j in range(i+1, max_index):
            for k in range(0, max_index):
                for l in range(k+1, max_index):
                    if i == 0:
                        max_i_sign = 1
                    else:
                        max_i_sign = 2
                    if k == 0:
                        max_k_sign = 1
                    else:
                        max_k_sign = 2
                    for i_sign in range(max_i_sign):
                        for k_sign in range(max_k_sign):
                            signed_i = i*(-1)**i_sign
                            signed_k = k*(-1)**k_sign
                            normsquare_ji = normsquare_func(j, signed_i)
                            normsquare_lk = normsquare_func(l, signed_k)
                            if ((math.gcd(math.gcd(j, signed_i), math.gcd(l, signed_k)) == 1) and
                                ((signed_i//signed_k != j//l) if signed_k != 0 else (j//l != 1)) and
                                (normsquare_ji >= normsquare_lk)):
                                ratio_dict[(j, signed_i, l, signed_k)] = math.sqrt(normsquare_ji/normsquare_lk)

    sorted_ratio_dict_1 = sorted(ratio_dict.items(), key=lambda item: normsquare_func(item[0][0], item[0][1]))
    sorted_ratio_dict = sorted(sorted_ratio_dict_1, key=lambda item: item[1])
    return sorted_ratio_dict
    
quad_d_list = [-2, -5, -6, -7, -10, -11, -13, -14, -15]
#quad_d_list = [-7, -11, -15]
sorted_ratio_dict_list = []
for d in quad_d_list:
    sorted_ratio_dict_list.append(make_quadratic_supercell_dict(21, d))

for i, sorted_ratio_list in enumerate(sorted_ratio_dict_list):
    filename = f'Zsqrt{-quad_d_list[i]}i_list_20.py'
    with open(filename, 'w') as f:
        for j, item in enumerate(sorted_ratio_list):
            if j == 0:
                f.write(f'sorted_ratio_dict = [{str(item)},\n')
            else:
                f.write(f'{str(item)},\n')
        
        f.write(']\n')
